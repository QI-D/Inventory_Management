version: '3.3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - /home/ubuntu/zookeeper/data:/opt/zookeeper-3.4.13/data
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: ec2-34-234-41-89.compute-1.amazonaws.com# docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://ec2-34-234-41-89.compute-1.amazonaws.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/ubuntu/kafka:/kafka/kafka-logs
    depends_on:
      - "zookeeper"
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'inventory'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'mysql_user'
      # You can use whatever password you like
      MYSQL_PASSWORD: ''
      # Password for root access
      MYSQL_ROOT_PASSWORD: ''
    ports:
    # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
    # Opens port 3306 on the container
      - '3306'
    # Where our data will be persisted
    volumes:
    - my-db:/var/lib/mysql

  receiver:
    depends_on:
      - kafka
    image: receiver:latest
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/receiver:/config
      - /home/ubuntu/logs:/logs
    ports:
      - "8080:8080"
    networks:
      - "api.network"

  storage:
    depends_on:
      - db
      - kafka
    image: storage:latest
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/storage:/config
      - /home/ubuntu/logs:/logs
    ports:
      - "8090:8090"
    networks:
      - "api.network"

  processing:
    depends_on:
      - storage
    image: processing:latest
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/processing:/config
      - /home/ubuntu/logs:/logs
      - processing-db:/data
    ports:
      - "8100:8100"
    networks:
      - "api.network"

  audit_log:
    depends_on:
      - kafka
    image: audit_log:latest
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/audit_log:/config
      - /home/ubuntu/logs:/logs
    ports:
      - "8110:8110"
    networks:
      - "api.network"

  dashboard:
    image: dashboard:latest
    ports:
      - "3000:3000"
    depends_on:
      - "processing"
      - "audit_log"
    networks:
      - "api.network"

  health_check:
    image: health_check:latest
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/health:/config
      - /home/ubuntu/logs:/logs
      - health-db:/data
    ports:
      - "8120:8120"
    networks:
      - "api.network"

  nginx:
    image: nginx
    volumes:
      - /home/ubuntu/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - receiver
      - storage
      - processing
      - audit_log
      - dashboard
    ports:
      - "80:80"
    networks:
      - "api.network"

# Names our volume
volumes:
  my-db:
  processing-db:
  health-db:

networks:
  api.network:
